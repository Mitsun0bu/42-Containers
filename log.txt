
~~~~~ TEST# 1 - FILL CONSTRUCTOR ~~~~~

	TEST OUTPUT WITH std::vector, first serie
	elem[0] = 10
	elem[1] = 10
	elem[2] = 10
	elem[3] = 10
	elem[4] = 10
	size = 5
	capacity = 5

	TEST OUTPUT WITH ft::vector, first serie
	elem[0] = 10
	elem[1] = 10
	elem[2] = 10
	elem[3] = 10
	elem[4] = 10
	size = 5
	capacity = 5


	TEST OUTPUT WITH std::vector, second serie
	elem[0] = 0
	elem[1] = 0
	elem[2] = 0
	elem[3] = 0
	elem[4] = 0
	size = 5
	capacity = 5

	TEST OUTPUT WITH ft::vector, second serie
	elem[0] = 0
	elem[1] = 0
	elem[2] = 0
	elem[3] = 0
	elem[4] = 0
	size = 5
	capacity = 5

~~~~~ TEST# 2 - COPY CONSTRUCTOR ~~~~~

	TEST OUTPUT WITH std::vector
	elem[0] = 42
	elem[0] copy = 42

	TEST OUTPUT WITH ft::vector
	elem[0] = 42
	elem[0] copy = 42

~~~~~ TEST# 3 - ITERATORS ~~~~~

	TEST OUTPUT WITH std::vector
	forward loop: elem = 42
	forward loop: elem = 42
	forward loop: elem = 42
	forward loop: elem = 42
	forward loop: elem = 42
	backward loop: elem = 41
	backward loop: elem = 40
	backward loop: elem = 39
	backward loop: elem = 38
	backward loop: elem = 37
	size = 5
	capacity = 5

	TEST OUTPUT WITH ft::vector
	forward loop: elem = 42
	forward loop: elem = 42
	forward loop: elem = 42
	forward loop: elem = 42
	forward loop: elem = 42
	backward loop: elem = 41
	backward loop: elem = 40
	backward loop: elem = 39
	backward loop: elem = 38
	backward loop: elem = 37
	size = 5
	capacity = 5

~~~~~ TEST# 5 - CONST ITERATORS ~~~

	TEST OUTPUT WITH ft::vector
	forward loop: elem = 10
	forward loop: elem = 20
	forward loop: elem = 30
	forward loop: elem = 40
	forward loop: elem = 50
	Uncomment the following line of code to see if you get compilation error
	Uncomment the following line of code to see if you get compilation error

~~~~~ TEST# 6 - SIZE ~~~

	TEST OUTPUT WITH std::vector
	size = 0
	size = 10

	TEST OUTPUT WITH ft::vector
	size = 0
	size = 10

~~~~~ TEST# 7 - MAX_SIZE ~~~

	TEST OUTPUT WITH std::vector
	size = 4611686018427387903

	TEST OUTPUT WITH ft::vector
	size = 4611686018427387903

~~~~~ TEST# 8 - RESIZE ~~~

	TEST OUTPUT WITH std::vector
	elem[0] = 1
	elem[1] = 2
	elem[2] = 3
	elem[3] = 4
	elem[4] = 5
	elem[5] = 100
	elem[6] = 100
	elem[7] = 100
	elem[8] = 0
	elem[9] = 0
	elem[10] = 0
	elem[11] = 0
	size = 12
	capacity = 16

	TEST OUTPUT WITH ft::vector
	elem[0] = 1
	elem[1] = 2
	elem[2] = 3
	elem[3] = 4
	elem[4] = 5
	elem[5] = 100
	elem[6] = 100
	elem[7] = 100
	elem[8] = 0
	elem[9] = 0
	elem[10] = 0
	elem[11] = 0
	size = 12
	capacity = 16

~~~~~ TEST# 9 - CAPACITY ~~~

	TEST OUTPUT WITH std::vector
	size = 100
	capacity = 128
	max_size = 4611686018427387903

	TEST OUTPUT WITH ft::vector
	size = 100
	capacity = 128
	max_size = 4611686018427387903

~~~~~ TEST# 10 - EMPTY ~~~

	TEST OUTPUT WITH std::vector
	empty = 1
	empty = 0

	TEST OUTPUT WITH ft::vector
	empty = 1
	empty = 0

~~~~~ TEST# 11 - RESERVE ~~~

	TEST OUTPUT WITH std::vector
	std_vector_1 capacity : 0
	std_vector_2 capacity : 0
	reserve(10) for std_vector_1
	std_vector_1 capacity = 10
	making std_vector_1 grow...
	capacity changed to : 10
	making std_vector_2 grow...
	capacity changed to : 1
	capacity changed to : 2
	capacity changed to : 4
	capacity changed to : 8
	capacity changed to : 16

	TEST OUTPUT WITH ft::vector
	ft_vector_1 capacity : 0
	ft_vector_2 capacity : 0
	reserve(10) for ft_vector_1
	ft_vector_1 capacity = 10
	making ft_vector_1 grow...
	capacity changed to : 10
	making ft_vector_2 grow...
	capacity changed to : 1
	capacity changed to : 2
	capacity changed to : 4
	capacity changed to : 8
	capacity changed to : 16

~~~~~ TEST# 12 - SHRINK_TO_FIT ~~~

	TEST OUTPUT WITH std::vector
	capcity : 100
	capacity after resize(10): 100
	capacity after shrink_to_fit(): 10

	TEST OUTPUT WITH ft::vector
	capcity : 100
	capacity after resize(10): 100
	capacity after shrink_to_fit(): 10

~~~~~ TEST# 13 - ELEMENT ACCESS ~~~~~

	TEST OUTPUT WITH std::vector
	elem[0] = 30
	elem[1] = 10
	elem[2] = 1993
	size = 3
	capacity = 4
	front = 30
	back = 1993
	elem[0] = 10
	elem[1] = 20
	elem[2] = 1993

	TEST OUTPUT WITH ft::vector
	elem[0] = 30
	elem[1] = 10
	elem[2] = 1993
	size = 3
	capacity = 4
	front = 30
	back = 1993
	elem[0] = 10
	elem[1] = 20
	elem[2] = 1993

~~~~~ TEST# 14 - ASSIGN ~~~~~

	TEST OUTPUT WITH std::vector
	elem[0] = 100
	elem[1] = 100
	elem[2] = 100
	size = 3
	capacity = 3
	elem[0] = 42
	elem[1] = 42
	size = 2
	capacity = 3
	elem[0] = 9
	elem[1] = 9
	elem[2] = 9
	elem[3] = 9
	elem[4] = 9
	size = 5
	capacity = 5

	TEST OUTPUT WITH ft::vector
	elem[0] = 100
	elem[1] = 100
	elem[2] = 100
	size = 3
	capacity = 3
	elem[0] = 42
	elem[1] = 42
	size = 2
	capacity = 3
	elem[0] = 9
	elem[1] = 9
	elem[2] = 9
	elem[3] = 9
	elem[4] = 9
	size = 5
	capacity = 5

~~~~~ TEST# 15 - PUSH_BACK ~~~~~

	TEST OUTPUT WITH std::vector
	elem[0] = 0
	elem[1] = 1
	elem[2] = 2
	elem[3] = 3
	elem[4] = 4
	size = 5
	capacity = 8

	TEST OUTPUT WITH ft::vector
	elem[0] = 0
	elem[1] = 1
	elem[2] = 2
	elem[3] = 3
	elem[4] = 4
	size = 5
	capacity = 8

~~~~~ TEST# 16 - POP_BACK ~~~~~

	TEST OUTPUT WITH std::vector
	elem[0] = 0
	elem[1] = 1
	elem[2] = 2
	elem[3] = 3
	elem[4] = 4
	size = 5
	capacity = 8
	last elem = 4
	last elem = 3
	last elem = 2
	last elem = 1
	last elem = 0
	size = 0
	capacity = 8

	TEST OUTPUT WITH ft::vector
	elem[0] = 0
	elem[1] = 1
	elem[2] = 2
	elem[3] = 3
	elem[4] = 4
	size = 5
	capacity = 8
	last elem = 4
	last elem = 3
	last elem = 2
	last elem = 1
	last elem = 0
	size = 0
	capacity = 8

~~~~~ TEST# 17 - INSERT ~~~~~

	TEST OUTPUT WITH std::vector

	After first insertion, std_vector contains:
	 200 100 100 100
	size = 4
	capacity = 6

	After second insertion, std_vector contains:
	 200 100 100 100 300 300
	size = 6
	capacity = 6

	After third insertion, std_vector contains:
	 200 100 400 400 100 100 300 300
	size = 8
	capacity = 12

	After fourth insertion, std_vector contains:
	 501 502 503 200 100 400 400 100 100 300 300
	size = 11
	capacity = 12

	After last insertion, std_vector contains:
	 501 502 503 42 42 42 200 100 400 400 100 100 300 300
	size = 14
	capacity = 24


	TEST OUTPUT WITH ft::vector

	After first insertion, ft_vector contains:
	 200 100 100 100
	size = 4
	capacity = 6

	After second insertion, ft_vector contains:
	 200 100 100 100 300 300
	size = 6
	capacity = 6

	After third insertion, ft_vector contains:
	 200 100 400 400 100 100 300 300
	size = 8
	capacity = 12

	After fourth insertion, ft_vector contains:
	 501 502 503 200 100 400 400 100 100 300 300
	size = 11
	capacity = 12

	After last insertion, std_vector contains:
	 501 502 503 42 42 42 200 100 400 400 100 100 300 300
	size = 14
	capacity = 24


~~~~~ TEST# 18 - ERASE ~~~~~

	TEST OUTPUT WITH std::vector
	elem[0] = 4
	elem[1] = 5
	elem[2] = 7
	elem[3] = 8
	elem[4] = 9
	elem[5] = 10
	size = 6
	capacity = 16

	TEST OUTPUT WITH ft::vector
	elem[0] = 4
	elem[1] = 5
	elem[2] = 7
	elem[3] = 8
	elem[4] = 9
	elem[5] = 10
	size = 6
	capacity = 16

~~~~~ TEST# 19 - SWAP ~~~~~

	TEST OUTPUT WITH std::vector
	before swap : elem[0] = 100
	before swap : elem[1] = 100
	before swap : elem[2] = 100
	size = 3
	capacity = 3
	after swap : elem[0] = 200
	after swap : elem[1] = 200
	after swap : elem[2] = 200
	after swap : elem[3] = 200
	after swap : elem[4] = 200
	size = 5
	capacity = 5

	TEST OUTPUT WITH ft::vector
	before swap : elem[0] = 100
	before swap : elem[1] = 100
	before swap : elem[2] = 100
	size = 3
	capacity = 3
	after swap : elem[0] = 200
	after swap : elem[1] = 200
	after swap : elem[2] = 200
	after swap : elem[3] = 200
	after swap : elem[4] = 200
	size = 5
	capacity = 5

~~~~~ TEST# 20 - CLEAR ~~~~~

	TEST OUTPUT WITH std::vector
	elem[0] = 100
	elem[1] = 200
	elem[2] = 300
	size = 3
	capacity = 4

	call to clear()
	size = 0
	capacity = 4

	elem[0] = 1101
	elem[1] = 2202
	size = 2
	capacity = 4

	TEST OUTPUT WITH ft::vector
	elem[0] = 100
	elem[1] = 200
	elem[2] = 300
	size = 3
	capacity = 4

	call to clear()
	size = 0
	capacity = 4

	elem[0] = 1101
	elem[1] = 2202
	size = 2
	capacity = 4
